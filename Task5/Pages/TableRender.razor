@page "/"
@using Task5.Data  


<PageTitle>Table</PageTitle>

<nav class="navbar navbar-expand-lg navbar-light border-bottom">
    <div class="d-flex justify-content-between w-100 align-items-center flex-wrap">
        <div class="d-flex justify-content-around align-items-center mb-2">
            <p class="fw-bold m-0">Region: </p>
            <select @onchange="OnRegionChanged" class="form-select ms-3" style="width:200px;">
                @foreach (var region in tControl.RegionsController.Regions)
                {
                    <option value="@region.RegionId">@region.RegionName</option>
                }
            </select>
        </div>
        <div class="d-flex justify-content-around align-items-center mb-2">
            <p class="fw-bold m-0">Errors: </p>
            <input type="range" @bind-value="RangeValue" @bind-value:event="oninput" @onchange="OnRangeValueChange" min="0" max="40" class="mx-3" step="1" />
            <input type="number" @bind-value="ErrorsValue" @bind-value:event="oninput" @onchange="OnNumRangeValueChange" min="0.0" max="1000.0" step="0.25" class="form-control" />
        </div>
        <div class="d-flex justify-content-around align-items-center mb-2">
            <p class="fw-bold m-0">Seed: </p>
            <input type="number" value="@Seed" @onchange="OnCurrentSeedChanged" max="@float.MaxValue" min="0.0" class="form-control mx-3" />
            <button class="btn btn-outline-primary" @onclick="GenerateNewSeed">Shuffle</button>
        </div>
        <div class="d-flex justify-content-around align-items-center mb-2">
            <button class="btn btn-success disabled" title="Button disable due to small budget">Export to CSV</button>
        </div>
    </div>
</nav>

<InfiniteScroll ObserverTargetId="observerTarget" ObservableTargetReached="(e)=>FetchPersons()">
    <table class="table">
        <thead>
            <tr>
                <td>Id</td>
                <td>HashId</td>
                <td>Full Name</td>
                <td>Full address</td>
                <td>Phone number</td>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < personsData.Count; i++)
            {
                <tr>
                    <td>
                        @(i+1)
                    </td>
                    <td>
                        @personsData[i].Id
                    </td>
                    <td>
                        @personsData[i].FullName
                    </td>
                    <td>
                        @personsData[i].Address
                    </td>
                    <td>
                        @personsData[i].PhoneNumber
                    </td>
                </tr>
            }
    <li class="list-group-item" id="observerTarget"></li>
    </tbody>
    </table>
</InfiniteScroll>

@code {

    Random random = new Random();
    int RangeValue { get; set; } = 20;
    double ErrorsValue { get; set; } = 5;

    int Seed { get; set; }

    private List<RecordData> personsData = new List<RecordData>();
    int AlreadyLoaded = 0;

    TableController tControl;


    protected override async Task OnInitializedAsync()
    {
        personsData = new List<RecordData>();
        Seed = random.Next();
        tControl = new TableController(Seed);
        await FetchPersons(40);
    }


    private async Task FetchPersons(int LoadAmount = 10)
    {
        var fetchedRecords = await tControl.GetRecordsAsync(LoadAmount,ErrorsValue);
        personsData.AddRange(fetchedRecords);
        AlreadyLoaded += LoadAmount;
    }

    private async void GenerateNewSeed(MouseEventArgs e)
    {
        Seed = random.Next();
        UpdateSeedValues();
    }

    private async void UpdateSeedValues()
    {
        tControl.Init(Seed);
        personsData = new List<RecordData>();
        await FetchPersons(40);
        AlreadyLoaded = 0;
    }

    private async void ChangeCurrentSeed(ChangeEventArgs e)
    {
        Seed = random.Next();
        UpdateSeedValues();
    }




    private Task OnRangeValueChange(ChangeEventArgs e)
    {
        ErrorsValue = (double)RangeValue / 4.0;
        UpdateSeedValues();
        return Task.FromResult(ErrorsValue);
    }
    private Task OnNumRangeValueChange(ChangeEventArgs e)
    {
        RangeValue=(int)(ErrorsValue*4);
        UpdateSeedValues();
        return Task.FromResult(ErrorsValue);
    }

    private Task OnRegionChanged(ChangeEventArgs e)
    {
        tControl.SetCurrentRegion(e.Value.ToString());
        UpdateSeedValues();
        return Task.FromResult(e.Value);
    }

    private Task OnCurrentSeedChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int val))
        {
            Seed = val;
            UpdateSeedValues();
        }
        return Task.FromResult(e.Value);
    }

}
